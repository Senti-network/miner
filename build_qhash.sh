#!/bin/bash

# QHash Miner Build Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ –º–∞–π–Ω–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CUDA –∏ cuQuantum
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./build_qhash.sh [clean|rebuild|install]
#   clean   - –æ—á–∏—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É
#   rebuild - –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ (clean + build)
#   install - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π CUDA
detect_cuda_path() {
    local cuda_paths=(
        "/usr/local/cuda"
        "/opt/cuda"
        "/usr/cuda"
        "/usr/bin"
        "/usr"
    )
    
    for path in "${cuda_paths[@]}"; do
        if [[ -d "$path" && -f "$path/bin/nvcc" ]]; then
            echo "$path"
            return 0
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PATH
    if command -v nvcc >/dev/null 2>&1; then
        nvcc_path=$(which nvcc)
        echo "${nvcc_path%/bin/nvcc}"
        return 0
    fi
    
    return 1
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π
setup_paths() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π..."
    
    # CUDA Path
    if [[ -z "$CUDA_PATH" ]]; then
        if CUDA_PATH=$(detect_cuda_path); then
            log_success "CUDA –Ω–∞–π–¥–µ–Ω: $CUDA_PATH"
        else
            log_error "CUDA –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CUDA Toolkit –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ CUDA_PATH"
            exit 1
        fi
    fi
    export CUDA_PATH
    
    # cuQuantum Path - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—É—Ç—å
    if [[ -z "$CUQUANTUM_ROOT" ]]; then
        CUQUANTUM_ROOT="/home/henuzzz/cuquantum-linux-x86_64-25.06.0.10_cuda12-archive"
    fi
    
    if [[ ! -d "$CUQUANTUM_ROOT" ]]; then
        log_error "cuQuantum –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: $CUQUANTUM_ROOT"
        log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é CUQUANTUM_ROOT"
        exit 1
    fi
    export CUQUANTUM_ROOT

    if [[ -z "$CUTENSORNET_ROOT" ]]; then
        CUTENSORNET_ROOT="$CUQUANTUM_ROOT"
    fi
    export CUTENSORNET_ROOT
    
    # –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã–µ –ø—É—Ç–∏ - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è CUDA
    if [[ "$CUDA_PATH" == "/usr" ]]; then
        # CUDA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—É—Ç–∏
        export CUSTATEVEC_INCLUDES="-I/usr/include -I$CUQUANTUM_ROOT/include"
        export CUTENSORNET_INCLUDES="-I/usr/include -I$CUTENSORNET_ROOT/include"
        export CUSTATEVEC_LDFLAGS="-L/usr/lib/x86_64-linux-gnu -L$CUQUANTUM_ROOT/lib -lcustatevec"
        export CUTENSORNET_LDFLAGS="-L/usr/lib/x86_64-linux-gnu -L$CUTENSORNET_ROOT/lib -lcutensornet"
        export LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:$CUQUANTUM_ROOT/lib:$CUTENSORNET_ROOT/lib:$LD_LIBRARY_PATH"
    else
        # CUDA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        export CUSTATEVEC_INCLUDES="-I$CUDA_PATH/include -I$CUQUANTUM_ROOT/include"
        export CUTENSORNET_INCLUDES="-I$CUDA_PATH/include -I$CUTENSORNET_ROOT/include"
        export CUSTATEVEC_LDFLAGS="-L$CUDA_PATH/lib64 -L$CUQUANTUM_ROOT/lib -lcustatevec"
        export CUTENSORNET_LDFLAGS="-L$CUDA_PATH/lib64 -L$CUTENSORNET_ROOT/lib -lcutensornet"
        export LD_LIBRARY_PATH="$CUDA_PATH/lib64:$CUQUANTUM_ROOT/lib:$CUTENSORNET_ROOT/lib:$LD_LIBRARY_PATH"
    fi
    
    log_success "–ü—É—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:"
    log_info "  CUDA_PATH: $CUDA_PATH"
    log_info "  CUQUANTUM_ROOT: $CUQUANTUM_ROOT"
    log_info "  CUTENSORNET_ROOT: $CUTENSORNET_ROOT"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    local tools=("gcc" "g++" "make" "autoconf" "automake" "pkg-config")
    for tool in "${tools[@]}"; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            log_error "–ù–µ –Ω–∞–π–¥–µ–Ω: $tool"
            log_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt-get install build-essential autoconf automake libtool pkg-config"
            exit 1
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º libtool –æ—Ç–¥–µ–ª—å–Ω–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å libtool –∏–ª–∏ libtoolize)
    if ! command -v "libtool" >/dev/null 2>&1 && ! command -v "libtoolize" >/dev/null 2>&1; then
        log_error "–ù–µ –Ω–∞–π–¥–µ–Ω: libtool –∏–ª–∏ libtoolize"
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt-get install libtool"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CUDA
    local nvcc_found=false
    if [[ -f "$CUDA_PATH/bin/nvcc" ]]; then
        nvcc_found=true
    elif [[ "$CUDA_PATH" == "/usr" && -f "/usr/bin/nvcc" ]]; then
        nvcc_found=true
    fi
    
    if [[ "$nvcc_found" == "false" ]]; then
        log_error "CUDA nvcc –Ω–µ –Ω–∞–π–¥–µ–Ω: $CUDA_PATH/bin/nvcc"
        log_info "–ù–∞–π–¥–µ–Ω–Ω—ã–π nvcc: $(which nvcc 2>/dev/null || echo '–Ω–µ –Ω–∞–π–¥–µ–Ω')"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cuQuantum
    if [[ ! -f "$CUQUANTUM_ROOT/include/custatevec.h" ]]; then
        log_error "cuQuantum –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: $CUQUANTUM_ROOT/include/custatevec.h"
        exit 1
    fi

    if [[ ! -f "$CUQUANTUM_ROOT/lib/libcustatevec.so" ]]; then
        log_error "cuQuantum –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $CUQUANTUM_ROOT/lib/libcustatevec.so"
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cuTensorNet (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if [[ ! -f "$CUTENSORNET_ROOT/include/cutensornet.h" ]]; then
        log_warning "cuTensorNet –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: $CUTENSORNET_ROOT/include/cutensornet.h"
    fi
    if [[ ! -f "$CUTENSORNET_ROOT/lib/libcutensornet.so" ]]; then
        log_warning "cuTensorNet –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $CUTENSORNET_ROOT/lib/libcutensornet.so"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    local libs=("libssl-dev" "libcurl4-openssl-dev" "libjansson-dev" "libevent-dev" "libzmq3-dev")
    for lib in "${libs[@]}"; do
        if ! dpkg -l | grep -q "$lib"; then
            log_warning "–í–æ–∑–º–æ–∂–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $lib"
        fi
    done
    
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –û—á–∏—Å—Ç–∫–∞ —Å–±–æ—Ä–∫–∏
clean_build() {
    log_info "[üßπ] –û—á–∏—Å—Ç–∫–∞ —Å–ª–µ–¥–æ–≤ –æ—Ç —Å—Ç–∞—Ä–æ–π —Å–±–æ—Ä–∫–∏..."
    
    if [[ -f "Makefile" ]]; then
        make clean || true
    fi
    
    rm -rf autom4te.cache
    rm -f Makefile.in aclocal.m4 configure
    rm -f config.log config.status
    rm -f cpuminer-config.h cpuminer-config.h.in
    rm -f qubitcoin-miner
    
    log_success "[üßπ] –°–±–æ—Ä–∫–∞ –æ—á–∏—â–µ–Ω–∞"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ç—É–ª–æ–≤
setup_autotools() {
    log_info "[üî®] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ autotools..."
    
    if [[ ! -f "configure.ac" && ! -f "configure.in" ]]; then
        log_error "–ù–µ –Ω–∞–π–¥–µ–Ω configure.ac –∏–ª–∏ configure.in"
        exit 1
    fi
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ç—É–ª—ã
    if [[ -f "autogen.sh" ]]; then
        chmod +x autogen.sh
        ./autogen.sh
    else
        autoreconf -fiv
    fi
    
    log_success "[üî®] Autotools –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏
configure_build() {
    log_info "[üî®] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏..."
    
    # –§–ª–∞–≥–∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
    export CFLAGS="-O3 -march=native -fomit-frame-pointer"
    export CXXFLAGS="-O3 -march=native -fomit-frame-pointer"
    
    # LDFLAGS –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è CUDA
    if [[ "$CUDA_PATH" == "/usr" ]]; then
        export LDFLAGS="-Wl,-rpath,/usr/lib/x86_64-linux-gnu -Wl,-rpath,$CUQUANTUM_ROOT/lib"
    else
        export LDFLAGS="-Wl,-rpath,$CUDA_PATH/lib64 -Wl,-rpath,$CUQUANTUM_ROOT/lib"
    fi
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CUDA –∏ cuQuantum
    ./configure \
        --with-curl=/usr \
        --with-crypto=/usr \
        CUSTATEVEC_INCLUDES="$CUSTATEVEC_INCLUDES" \
        CUTENSORNET_INCLUDES="$CUTENSORNET_INCLUDES" \
        CUSTATEVEC_LDFLAGS="$CUSTATEVEC_LDFLAGS" \
        CUTENSORNET_LDFLAGS="$CUTENSORNET_LDFLAGS" \
        LIBS="-lcurl -lssl -lcrypto -ljansson -levent -lzmq -lz" \
        CFLAGS="$CFLAGS" \
        CXXFLAGS="$CXXFLAGS" \
        LDFLAGS="$LDFLAGS"
    
    log_success "[üî®] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –°–±–æ—Ä–∫–∞
build_project() {
    log_info "[üî®] –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏
    local num_cores
    if command -v nproc >/dev/null 2>&1; then
        num_cores=$(nproc)
    else
        num_cores=4
    fi
    
    log_info "[üî®] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è $num_cores —è–¥–µ—Ä –¥–ª—è —Å–±–æ—Ä–∫–∏"
    
    # –°–æ–±–∏—Ä–∞–µ–º
    make -j"$num_cores"
    
    if [[ -f "qubitcoin-miner" ]]; then
        log_success "[‚úÖ] –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–∞–π–ª–µ
        log_info "[‚ÑπÔ∏è] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ:"
        ls -lh qubitcoin-miner
        file qubitcoin-miner
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        log_info "[üî®] –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:"
        ldd qubitcoin-miner | grep -E "(cuda|custatevec)" || log_warning "CUDA/cuQuantum –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ ldd"
        
    else
        log_error "–°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å - –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω"
        exit 1
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
install_binary() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞..."
    
    local install_dir="/usr/local/bin"
    if [[ ! -w "$install_dir" ]]; then
        log_warning "–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ $install_dir, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sudo"
        sudo cp qubitcoin-miner "$install_dir/"
    else
        cp qubitcoin-miner "$install_dir/"
    fi
    
    log_success "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ $install_dir/qubitcoin-miner"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
test_build() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏..."
    
    if [[ ! -f "qubitcoin-miner" ]]; then
        log_error "–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # –¢–µ—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
    if ./qubitcoin-miner --help >/dev/null 2>&1; then
        log_success "[‚úÖ] –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω"
    else
        log_error "[‚ùå] –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ qhash –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    if ./qubitcoin-miner --help | grep -q "qhash"; then
        log_success "[‚úÖ] –ê–ª–≥–æ—Ä–∏—Ç–º qhash –Ω–∞–π–¥–µ–Ω"
    else
        log_warning "[‚ö†Ô∏è] –ê–ª–≥–æ—Ä–∏—Ç–º qhash –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–∫–µ"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
show_usage() {
    cat << EOF
QHash Miner Build Script

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–Ø]

–û–ü–¶–ò–ò:
    clean      –û—á–∏—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É
    rebuild    –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ (clean + build)
    install    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏
    test       –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
    help       –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:
    CUDA_PATH         –ü—É—Ç—å –∫ CUDA (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω)
    CUQUANTUM_ROOT    –ü—É—Ç—å –∫ cuQuantum (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /home/henuzzz/cuquantum-linux-x86_64-25.06.0.10_cuda12-archive)

–ü–†–ò–ú–ï–†–´:
    $0                    # –û–±—ã—á–Ω–∞—è —Å–±–æ—Ä–∫–∞
    $0 rebuild            # –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞
    $0 clean              # –¢–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∫–∞
    CUDA_PATH=/opt/cuda $0 # –°–±–æ—Ä–∫–∞ —Å custom CUDA –ø—É—Ç–µ–º

EOF
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_info "=== QHash Miner Build Script ==="
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    case "${1:-build}" in
        "help"|"-h"|"--help")
            show_usage
            exit 0
            ;;
        "clean")
            clean_build
            exit 0
            ;;
        "test")
            test_build
            exit 0
            ;;
        "rebuild")
            setup_paths
            check_dependencies
            clean_build
            setup_autotools
            configure_build
            build_project
            test_build
            ;;
        "install")
            if [[ ! -f "qubitcoin-miner" ]]; then
                log_error "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–±–æ—Ä–∫—É"
                exit 1
            fi
            install_binary
            exit 0
            ;;
        "build"|"")
            setup_paths
            check_dependencies
            setup_autotools
            configure_build
            build_project
            test_build
            ;;
        *)
            log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_usage
            exit 1
            ;;
    esac
    
    log_success "=== –ì–æ—Ç–æ–≤–æ! ==="
    log_info "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞: ./qubitcoin-miner -a qhash --benchmark -t 1"
    log_info "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞ LuckyPool: ./qubitcoin-miner -a qhash -o qubitcoin.luckypool.io:8611 -u –í–ê–®_–ê–î–†–ï–°–°.–ò–ú–Ø_–í–û–†–ö–ï–†–ê -t –ö–û–õ_–í–û_–Ø–î–ï–†_CPU"
    log_info "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–±–æ—Ä–∫–∏: $0 install"
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi 